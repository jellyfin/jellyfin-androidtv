name: Cherry-pick Conflict Check

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to check for cherry-pick conflicts'
        required: true
        type: string
      target_branch:
        description: 'Target branch to cherry-pick to (default: master)'
        required: false
        default: 'master'
        type: string
      output_format:
        description: 'Output format (text or json)'
        required: false
        default: 'text'
        type: choice
        options:
        - text
        - json

  pull_request:
    types: [opened, synchronize]
    # Only run on PRs that might involve cherry-picks
    branches:
      - master
      - develop
      - release/*

  issue_comment:
    types: [created]
    # Trigger on comments like "/check-cherry-pick abc123def master"

jobs:
  detect-cherry-pick-request:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/check-cherry-pick')
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.parse.outputs.commit_hash }}
      target_branch: ${{ steps.parse.outputs.target_branch }}
      should_run: ${{ steps.parse.outputs.should_run }}
    steps:
      - name: Parse cherry-pick comment
        id: parse
        run: |
          comment="${{ github.event.comment.body }}"
          if [[ "$comment" =~ /check-cherry-pick[[:space:]]+([a-f0-9]{7,40})([[:space:]]+([a-zA-Z0-9/_-]+))? ]]; then
            echo "commit_hash=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "target_branch=${BASH_REMATCH[3]:-master}" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  check-conflicts:
    runs-on: ubuntu-latest
    needs: [detect-cherry-pick-request]
    if: |
      always() && (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, 'cherry-pick')) ||
        (github.event_name == 'issue_comment' && needs.detect-cherry-pick-request.outputs.should_run == 'true')
      )
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for conflict detection
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine input parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "commit_hash=${{ github.event.inputs.commit_hash }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
            echo "output_format=${{ github.event.inputs.output_format }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "commit_hash=${{ needs.detect-cherry-pick-request.outputs.commit_hash }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ needs.detect-cherry-pick-request.outputs.target_branch }}" >> $GITHUB_OUTPUT
            echo "output_format=text" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Extract commit hash from PR if it's a cherry-pick PR
            PR_TITLE="${{ github.event.pull_request.title }}"
            if [[ "$PR_TITLE" =~ cherry-pick[[:space:]]+([a-f0-9]{7,40}) ]]; then
              echo "commit_hash=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            else
              echo "commit_hash=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
            fi
            echo "target_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
            echo "output_format=json" >> $GITHUB_OUTPUT
          fi

      - name: Validate commit hash
        run: |
          COMMIT_HASH="${{ steps.params.outputs.commit_hash }}"
          if ! git cat-file -e "$COMMIT_HASH" 2>/dev/null; then
            echo "‚ùå Invalid commit hash: $COMMIT_HASH"
            exit 1
          fi
          echo "‚úÖ Commit hash validated: $COMMIT_HASH"

      - name: Make scripts executable
        run: |
          chmod +x check_cherry_pick_conflicts.sh
          chmod +x check_cherry_pick_conflicts_enhanced.sh

      - name: Run enhanced conflict check
        id: conflict_check
        run: |
          COMMIT_HASH="${{ steps.params.outputs.commit_hash }}"
          TARGET_BRANCH="${{ steps.params.outputs.target_branch }}"
          OUTPUT_FORMAT="${{ steps.params.outputs.output_format }}"
          
          echo "üîç Running enhanced cherry-pick conflict analysis..."
          echo "Commit: $COMMIT_HASH"
          echo "Target Branch: $TARGET_BRANCH"
          echo "Output Format: $OUTPUT_FORMAT"
          echo ""
          
          if [ "$OUTPUT_FORMAT" = "json" ]; then
            OUTPUT=$(./check_cherry_pick_conflicts_enhanced.sh "$COMMIT_HASH" "$TARGET_BRANCH" --json)
            echo "conflict_analysis<<EOF" >> $GITHUB_OUTPUT
            echo "$OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Extract risk level for further processing
            RISK_LEVEL=$(echo "$OUTPUT" | jq -r '.risk_level')
            echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          else
            OUTPUT=$(./check_cherry_pick_conflicts_enhanced.sh "$COMMIT_HASH" "$TARGET_BRANCH")
            echo "conflict_analysis<<EOF" >> $GITHUB_OUTPUT
            echo "$OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Extract risk level from text output
            RISK_LEVEL=$(echo "$OUTPUT" | grep "Risk Level:" | awk '{print $3}')
            echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          fi

      - name: Create conflict report artifact
        uses: actions/upload-artifact@v4
        with:
          name: cherry-pick-conflict-report-${{ steps.params.outputs.commit_hash }}
          path: |
            check_cherry_pick_conflicts.sh
            check_cherry_pick_conflicts_enhanced.sh
          retention-days: 30

      - name: Comment on PR (if triggered by PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictAnalysis = `${{ steps.conflict_check.outputs.conflict_analysis }}`;
            const riskLevel = `${{ steps.conflict_check.outputs.risk_level }}`;
            
            let emoji = "‚úÖ";
            let status = "Low Risk";
            
            if (riskLevel === "HIGH") {
              emoji = "‚ùå";
              status = "High Risk";
            } else if (riskLevel === "MEDIUM") {
              emoji = "‚ö†Ô∏è";
              status = "Medium Risk";
            }
            
            const comment = `## ${emoji} Cherry-pick Conflict Analysis
            
            **Status:** ${status}
            **Commit:** \`${{ steps.params.outputs.commit_hash }}\`
            **Target Branch:** \`${{ steps.params.outputs.target_branch }}\`
            
            <details>
            <summary>üìã Detailed Analysis</summary>
            
            \`\`\`
            ${conflictAnalysis}
            \`\`\`
            
            </details>
            
            ---
            *This analysis was generated automatically. For manual checks, use: \`/check-cherry-pick ${{ steps.params.outputs.commit_hash }} ${{ steps.params.outputs.target_branch }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on issue (if triggered by comment)
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictAnalysis = `${{ steps.conflict_check.outputs.conflict_analysis }}`;
            const riskLevel = `${{ steps.conflict_check.outputs.risk_level }}`;
            
            let emoji = "‚úÖ";
            let status = "Low Risk";
            
            if (riskLevel === "HIGH") {
              emoji = "‚ùå";
              status = "High Risk";
            } else if (riskLevel === "MEDIUM") {
              emoji = "‚ö†Ô∏è";
              status = "Medium Risk";
            }
            
            const comment = `## ${emoji} Cherry-pick Conflict Analysis Results
            
            **Status:** ${status}
            **Commit:** \`${{ steps.params.outputs.commit_hash }}\`
            **Target Branch:** \`${{ steps.params.outputs.target_branch }}\`
            
            <details>
            <summary>üìã View Full Analysis</summary>
            
            \`\`\`
            ${conflictAnalysis}
            \`\`\`
            
            </details>
            
            ${riskLevel === "HIGH" ? "‚ö†Ô∏è **High conflict risk detected!** Manual intervention will likely be needed." : ""}
            ${riskLevel === "MEDIUM" ? "‚ö†Ô∏è **Moderate conflict risk.** Proceed with caution and test thoroughly." : ""}
            ${riskLevel === "LOW" ? "‚úÖ **Low conflict risk.** Safe to proceed with cherry-pick." : ""}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Set job status based on risk level
        run: |
          RISK_LEVEL="${{ steps.conflict_check.outputs.risk_level }}"
          if [ "$RISK_LEVEL" = "HIGH" ]; then
            echo "‚ùå High conflict risk detected!"
            exit 1
          elif [ "$RISK_LEVEL" = "MEDIUM" ]; then
            echo "‚ö†Ô∏è Medium conflict risk detected - proceed with caution"
            exit 0
          else
            echo "‚úÖ Low conflict risk - safe to proceed"
            exit 0
          fi

  # Additional job for scheduled checks of recent commits
  scheduled-conflict-monitoring:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [master, develop]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}

      - name: Make scripts executable
        run: |
          chmod +x check_cherry_pick_conflicts.sh
          chmod +x check_cherry_pick_conflicts_enhanced.sh

      - name: Check recent commits for potential conflicts
        run: |
          echo "üîç Checking recent commits on ${{ matrix.branch }} for potential cherry-pick conflicts..."
          
          # Get commits from last 7 days
          RECENT_COMMITS=$(git log --since="7 days ago" --pretty=format:"%H" ${{ matrix.branch }})
          
          for commit in $RECENT_COMMITS; do
            echo "Analyzing commit: $commit"
            ./check_cherry_pick_conflicts_enhanced.sh "$commit" "master" --json > "conflict-report-$commit.json"
            
            RISK_LEVEL=$(jq -r '.risk_level' "conflict-report-$commit.json")
            if [ "$RISK_LEVEL" = "HIGH" ]; then
              echo "‚ö†Ô∏è High-risk commit detected: $commit"
              # Could trigger notifications here
            fi
          done

# Optional: Add schedule trigger for regular monitoring
# Uncomment the lines below to enable scheduled checks
# on:
#   schedule:
#     - cron: '0 8 * * MON'  # Every Monday at 8 AM UTC
